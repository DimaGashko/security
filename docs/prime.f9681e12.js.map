{"version":3,"sources":["prime/scripts/smallPrimes.ts","prime/scripts/expMod.ts","prime/scripts/rabinMillersCheck.ts","prime/scripts/genPrime.ts","prime/index.ts"],"names":[],"mappings":"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","file":"prime.f9681e12.js","sourceRoot":"../src/pages","sourcesContent":["\nexport default [\n   2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\n   31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\n   73, 79, 83, 89, 97, 101, 103, 107, 109, 113,\n   127, 131, 137, 139, 149, 151, 157, 163, 167, 173,\n   179, 181, 191, 193, 197, 199, 211, 223, 227, 229,\n   233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\n   283, 293, 307, 311, 313, 317, 331, 337, 347, 349,\n   353, 359, 367, 373, 379, 383, 389, 397, 401, 409,\n   419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\n   467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\n   547, 557, 563, 569, 571, 577, 587, 593, 599, 601,\n   607, 613, 617, 619, 631, 641, 643, 647, 653, 659,\n   661, 673, 677, 683, 691, 701, 709, 719, 727, 733,\n   739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\n   811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\n   877, 881, 883, 887, 907, 911, 919, 929, 937, 941,\n   947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013,\n   1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069,\n   1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,\n   1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223,\n   1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291,\n   1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373,\n   1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451,\n   1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511,\n   1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583,\n   1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657,\n   1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733,\n   1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811,\n   1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889,\n   1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987,\n   1993, 1997, 1999,\n];\n","\nexport default function expMod(base: number, exp: number, mod: number) {\n   if (exp === 1) return base % mod; \n\n   const bs = exp.toString(2).split('').map(b => +b);\n   const mods = new Array(bs.length);\n   mods[0] = base;\n\n   bs.forEach((b, i) => {\n      if (i === 0) return;\n\n      const t = mods[i - 1] ** 2 % mod;\n      mods[i] = (b === 1) ? (t * base) % mod : t;\n   });\n   \n   return mods[mods.length - 1];\n}\n","import expMod from \"./expMod\";\n\n/**\n * Miller-Rabin Primality Test\n * \n * @returns true if n is **probably** prime and \n *    false if n is definitely not prime\n */\nexport default function rabinMillersCheck(n: number): boolean {\n   n = Math.abs(n);\n   \n   if (n < 2) return false;\n   if (n == 2) return true;\n\n   const a = 2;\n   let k = 1;\n\n   while ((n - 1) % 2 ** k === 0) {\n      k++;\n   }\n\n   const m = (n - 1) / 2 ** --k;\n   let b = expMod(a, m, n);\n\n   if (b === 1 || b === n - 1) {\n      return true;\n   }\n\n   for (let i = 0; i < k; i++) {\n      b = (b * b) % n;\n      \n      if (b === 1) return false;\n      if (b === n - 1) return true;\n   }\n\n   return false;\n}  ","import smallPrimes from \"./smallPrimes\";\nimport rabinMillersCheck from \"./rabinMillersCheck\";\n\nexport default function genPrime(size = 16) {\n   let strN = new Array(size - 2).fill('')\n      .map(_ => (Math.random() > 0.5) ? '1' : '0').join('');\n\n   let n = parseInt(`1${strN}1`, 2);\n\n   while (!check(n)) {\n      n += 2;\n   }\n\n   return n;\n}\n\nfunction check(n: number): boolean {\n   return smallPrimes.some(p => n % p === 0) &&\n      rabinMillersCheck(n);\n}","import 'normalize.scss/normalize.scss';\nimport './index.scss';\n\nimport gen from './scripts/genPrime';\nimport mod from './scripts/expMod';\nimport rabinMillersCheck from './scripts/rabinMillersCheck';\n\nconst global = <any>window;\n\nprintHello();\n\nglobal.genPrime = gen;\nglobal.checkPrime = rabinMillersCheck;\nglobal.expMod = mod;\n\nfunction printHello() {\n   console.log('%cSoftware Security', 'color: red; font-size: 28px');\n   console.log('%cPrime numbers generation & Exponential modulo', 'color: red; font-size: 20px');\n\n   console.log(`%cAvailable commands:\n      > genPrime(size) - generate random size-bits prime number\n      > checkPrime(n) - check if n is prime (Miller-Rabin primality test)\n      > expMod(base, exp, n) - find the exponential modulo (base^exp mod n)\n   `.replace(/\\n\\s+/g, '\\n'), 'font-size: 16px');\n}"]}