{"version":3,"sources":["playfair/algorithms/playfair.ts","playfair/index.ts"],"names":[],"mappings":";;;;;AA8BC,aAAA,IAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA9BD,IAAM,EAAW,4BAA4B,MAAM,IAC7C,EAAY,IACZ,EAAa,EAEnB,SAAgB,EAAO,EAAc,EAAa,EAAqB,EAAuB,GAEpF,YAFwC,IAAA,IAAA,EAAA,QAAqB,IAAA,IAAA,EAAA,QAAuB,IAAA,IAAA,EAAA,GAC9E,EAAW,EAAM,EAAU,GAI3C,SAAgB,EAAO,EAAc,IAIrC,SAAS,EAAW,GACV,OAAA,EAAI,cAAc,QAAQ,IAAM,IAG1C,SAAS,EAAW,EAAc,EAAoB,GAC5C,OAAA,EAAM,EAAgB,EAAM,GAAW,GAGjD,SAAS,EAAgB,EAAc,GAC9B,IAAA,EAAU,IAAI,IAAI,GACxB,OAAA,EAAW,EAAK,MAAM,IAAQ,EAAS,OAAO,SAAA,GAAM,OAAC,EAAQ,IAAI,MAGpE,SAAS,EAAM,EAAY,GACjB,OAAA,IAAI,MAAM,KAAK,KAAK,EAAI,OAAS,IAAO,KAAK,GAAG,IAAI,SAAC,EAAG,GACrD,OAAA,EAAI,MAAM,EAAI,GAAO,EAAI,GAAK,KAxB3C,QAAA,OAAA,EAKA,QAAA,OAAA;;ACIC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAbD,QAAA,iCACA,QAAA,gBACA,IAAA,EAAA,QAAA,yBAEM,EAAW,sCAAsC,MAAM,IACvD,EAAY,IAMlB,SAAS,KAJT,QAAQ,IAAI,EAAA,OAAO,UAAW,qBAE9B","file":"playfair.ca684ace.js","sourceRoot":"../src/pages","sourcesContent":["const ALPHABET = 'abcdefghiklmnopqrstuvwxyz'.split('');\nconst DELIMITER = 'x';\nconst GRID_WIDTH = 5;\n\nexport function encode(code: string, msg: string, alphabet = ALPHABET, delimiter = DELIMITER, gridWidth = GRID_WIDTH) {\n   const grid = createGrid(code, alphabet, gridWidth);\n   return grid;\n}\n\nexport function decode(code: string, msg: string) {\n\n}\n\nfunction prepareMsg(msg: string) {\n   return msg.toLowerCase().replace('\\s', '')\n}\n\nfunction createGrid(code: string, alphabet: string[], width: number) {\n   return chunk(prepareAlphabet(code, alphabet), width);\n}\n\nfunction prepareAlphabet(code: string, alphabet: string[]): string[] {\n   const codeSet = new Set(code);\n   return [...code.split(''), ...alphabet.filter(ch => !codeSet.has(ch))]\n}\n\nfunction chunk(arr: any[], size: number): any[][] {\n   return new Array(Math.ceil(arr.length / size)).fill(0).map((_, i) => {\n      return arr.slice(i * size, (i + 1) * size);\n   });\n}","import 'normalize.scss/normalize.scss';\nimport './index.scss';\nimport { encode } from './algorithms/playfair';\n\nconst ALPHABET = \"абвгдеєжзиіїйклмнопрстуфхцчшщьюя'._\".split('');\nconst DELIMITER = \"'\";\n\nconsole.log(encode('cluster', 'meet me tomorrow'));\n\ninitEvents();\n\nfunction initEvents() {\n  \n}\n"]}